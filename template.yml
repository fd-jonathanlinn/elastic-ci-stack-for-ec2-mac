---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Buildkite Elastic Mac %v"

Parameters:
  HostFamily:
    Type: String
    Description: Host type to provision, e.g. mac1 for mac1.metal.
    Default: "mac2"

  InstanceType:
    Type: String
    Description: Instance type to provision, e.g. mac1.metal.
    Default: "mac2.metal"

  ImageId:
    Type: AWS::EC2::Image::Id
    Description: EC2 AMI to boot on the dedicated hosts. Expects auto-login for the ec2-user to be configured.

  RootVolumeSize:
    Type: Number
    Description: Root volume size in GiB.

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets to launch dedicated instances in.

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The VPC security groups to associate with the network interface of launched instances.

  IamInstanceProfile:
    Type: String
    Description: Optional. The IAM Instance Profile ARN to associate with instances.
    Default: ""

  InstanceRoleName:
    Type: String
    Description: Optional - A name for the IAM Role attached to the Instance Profile
    Default: ""

  MinSize:
    Type: Number
    Description: Minimum number of instances to boot.
    Default: 0

  MaxSize:
    Type: Number
    Description: Maximum number of instances to boot.
    Default: 3

  BuildkiteAgentToken:
    Type: String
    NoEcho: true
    Description: "Buildkite Agent token from https://buildkite.com/organizations/-/agents"
    Default: ""

  BuildkiteAgentTokenParameterStorePath:
    Description: Existing SSM Parameter Store path to the Buildkite agent registration token (takes precedence over BuildkiteAgentToken). Expects a leading slash ('/').
    Type: String
    Default: ""
    AllowedPattern: "^$|^/[a-zA-Z0-9_.\\-/]+$"
    ConstraintDescription: "Expects a leading forward slash"

  BuildkiteAgentQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  KeyName:
    Description: Optional - SSH keypair used to access the buildkite instances via ec2_user, setting this will enable SSH ingress
    Type: String
    Default: ""

  EnableCostAllocationTags:
    Type: String
    Description: Enables AWS Cost Allocation tags for all resources in the stack. See https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  CostAllocationTagName:
    Type: String
    Description: The name of the Cost Allocation Tag used for billing purposes
    Default: "CreatedBy"

  CostAllocationTagValue:
    Type: String
    Description: The value of the Cost Allocation Tag used for billing purposes
    Default: "buildkite-elastic-ci-stack-for-aws"

  InstanceName:
    Type: String
    Description: Optional - Customise the EC2 instance Name tag
    Default: ""

  EnableInstanceUserData:
    Type: String
    Description: Optional - Enables the bootstrap commands for EC2 instances in the UserData field of the launch template
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  InstanceRolePermissionsBoundaryARN:
    Type: String
    Description: The ARN of the policy used to set the permissions boundary for the role.
    Default: ""
  
  ManagedPolicyARNs:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of managed IAM policy ARNs to attach to the instance role
    Default: ""

  BuildkiteAgentTokenParameterStoreKMSKey:
    Description: AWS KMS key ID used to encrypt the SSM parameter (if encrypted)
    Type: String
    Default: ""

  BuildkiteAgentTokenParameterStoreKMSKey:
    Description: AWS KMS key ID used to encrypt the SSM parameter (if encrypted)
    Type: String
    Default: ""

  SecretsBucket:
    Description: Optional - Name of an existing S3 bucket containing pipeline secrets (Created if left blank)
    Type: String
    Default: ""

  SecretsBucketRegion:
    Description: Optional - Region for the SecretsBucket. If blank the bucket's region is dynamically discovered.
    Type: String
    Default: ""

  SecretsBucketEncryption:
    Description: Indicates whether the SecretsBucket should enforce encryption at rest and in transit
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  EnableSecretsPlugin:
    Type: String
    Description: Enables s3-secrets plugin for all pipelines
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  ECRAccessPolicy:
    Type: String
    Description: ECR access policy to give container instances
    AllowedValues:
      - none
      - readonly
      - poweruser
      - full
    Default: "none"

  ArtifactsBucket:
    Description: Optional - Name of an existing S3 bucket for build artifact storage
    Type: String
    Default: ""

Conditions:
  IamInstanceProfileProvided:
    !Not [ !Equals [ "", !Ref IamInstanceProfile ] ]

  HasKeyName:
    !Not [ !Equals [ !Ref KeyName, "" ] ]

  UseCostAllocationTags:
    !Equals [ !Ref EnableCostAllocationTags, "true" ]

  UseInstanceUserData:
    !Equals [ !Ref EnableInstanceUserData, "true" ]

  SetInstanceRoleName:
    !Not [ !Equals [ !Ref InstanceRoleName, "" ] ]

  SetInstanceRolePermissionsBoundaryARN:
    !Not [ !Equals [ !Ref InstanceRolePermissionsBoundaryARN, "" ] ]

  UseManagedPolicyARN:
    !Not [ !Equals [ !Join [ "", !Ref ManagedPolicyARNs ], "" ] ]

  HasManagedPolicies:
    !Or [ { Condition: UseManagedPolicyARN }, { Condition: UseECR } ]

  UseECR:
    !Not [ !Equals [ !Ref ECRAccessPolicy, "none" ] ]

  UseCustomerManagedParameterPath:
    !Not [ !Equals [ !Ref BuildkiteAgentTokenParameterStorePath, "" ] ]

  UseCustomerManagedKeyForParameterStore:
    !Not [ !Equals [ !Ref BuildkiteAgentTokenParameterStoreKMSKey, "" ] ]

  CreateAgentTokenParameter:
    !Equals [ !Ref BuildkiteAgentTokenParameterStorePath, "" ]

  CreateSecretsBucket:
    !And
        - !Equals [ !Ref EnableSecretsPlugin, "true"]
        - !Equals [ !Ref SecretsBucket, "" ]

  EnforceSecretsBucketEncryption:
    !And
        - !Condition CreateSecretsBucket
        - !Equals [ !Ref SecretsBucketEncryption, "true"]

  HasSecretsBucket:
      !Or [ !Condition CreateSecretsBucket, !Condition UseSpecifiedSecretsBucket ]

  UseSpecifiedSecretsBucket:
      !Not [ !Equals [ !Ref SecretsBucket, "" ] ]

  UseStackNameForInstanceName:
      !Equals [ !Ref InstanceName, "" ]

  UseArtifactsBucket:
      !Not [ !Equals [ !Ref ArtifactsBucket, "" ] ]

Mappings:
  ECRManagedPolicy:
    none      : { Policy: '' }
    readonly  : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly' }
    poweruser : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser' }
    full      : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess' }

Outputs:
  ResourceGroupId:
    Description: Dedicated resource group ID.
    Value: !GetAtt DedicatedHostGroup.Arn

Resources:
  DedicatedHostGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Ref AWS::StackName
      Configuration:
        - Type: AWS::EC2::HostManagement
          Parameters:
            - Name: any-host-based-license-configuration
              Values:
                - true
            - Name: allowed-host-families
              Values: [ !Ref HostFamily ]
            - Name: auto-allocate-host
              Values:
                - true
            - Name: auto-release-host
              Values:
                - true
        - Type: AWS::ResourceGroups::Generic
          Parameters:
            - Name: allowed-resource-types
              Values:
                - AWS::EC2::Host
            - Name: deletion-protection
              Values:
                - UNLESS_EMPTY

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref IAMRole ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If [ SetInstanceRoleName, !Ref InstanceRoleName, !Sub "${AWS::StackName}-Role" ]
      PermissionsBoundary: !If [ SetInstanceRolePermissionsBoundaryARN, !Ref InstanceRolePermissionsBoundaryARN, !Ref "AWS::NoValue" ]
      ManagedPolicyArns: !If
          - HasManagedPolicies
          # Support multiple policies to attach by merging the values together and splitting on ','
          - !Split
            - ','
            # Join will skip over AWS::NoValue values
            - !Join
              - ','
              - - !If
                  - UseECR
                  - !FindInMap [ ECRManagedPolicy, !Ref ECRAccessPolicy, 'Policy' ]
                  - !Ref 'AWS::NoValue'
                # This may support multiple values of its own (separated by commas)
                - !If
                  - UseManagedPolicyARN
                  - !Join [ ',', !Ref ManagedPolicyARNs ]
                  - !Ref 'AWS::NoValue'
          - !Ref 'AWS::NoValue'
      Policies:
        - !If
          - UseCustomerManagedKeyForParameterStore
          - PolicyName: DecryptAgentToken
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${BuildkiteAgentTokenParameterStoreKMSKey}
          - !Ref 'AWS::NoValue'
        - PolicyName: ReadAgentToken
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource:
                  !Sub
                    - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterPath}
                    - ParameterPath: !If [ UseCustomerManagedParameterPath, !Ref BuildkiteAgentTokenParameterStorePath, !Ref BuildkiteAgentTokenParameter ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com, ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - !If
            - HasSecretsBucket
            - Sid: SecretsBucket
              Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
              Resource:
                - !Sub
                  - "arn:aws:s3:::${Bucket}/*"
                  - Bucket: !If [ CreateSecretsBucket, !Ref ManagedSecretsBucket, !Ref SecretsBucket ]
                - !Sub
                  - "arn:aws:s3:::${Bucket}"
                  - Bucket: !If [ CreateSecretsBucket, !Ref ManagedSecretsBucket, !Ref SecretsBucket ]
            - !Ref "AWS::NoValue"
          - !If
            - UseArtifactsBucket
            - Sid: ArtifactsBucket
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:ListBucket
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutObjectVersionAcl
              Resource:
                - !Sub "arn:aws:s3:::${ArtifactsBucket}/*"
                - !Sub "arn:aws:s3:::${ArtifactsBucket}"
            - !Ref "AWS::NoValue"
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingInstances
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
            Resource: "*"
          - Sid: TerminateInstance
            Effect: Allow
            Action:
              - autoscaling:SetInstanceHealth
              - autoscaling:TerminateInstanceInAutoScalingGroup
            Resource: !Sub arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AWS::StackName}-AgentAutoScaleGroup-*
          - Sid: Logging
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: "*"
          - Sid: Ssm
            Effect: Allow
            Action:
              - ssm:DescribeInstanceProperties
              - ssm:ListAssociations
              - ssm:PutInventory
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Resource: "*"
      Roles:
        - !Ref IAMRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        KeyName: !If [ "HasKeyName", !Ref KeyName, !Ref 'AWS::NoValue' ]
        Placement:
          HostResourceGroupArn: !GetAtt DedicatedHostGroup.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref RootVolumeSize
              VolumeType: gp3
        SecurityGroupIds: !Ref SecurityGroupIds
        IamInstanceProfile:
          Arn: !GetAtt "IAMInstanceProfile.Arn"
        TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Role
                  Value: buildkite-agent
                - Key: Name
                  Value: !If [ UseStackNameForInstanceName, !Ref "AWS::StackName", !Ref InstanceName ]
                - Key: BuildkiteAgentQueue
                  Value: !Ref BuildkiteAgentQueue
                - !If
                  - UseCostAllocationTags
                  - Key: !Ref CostAllocationTagName
                    Value: !Ref CostAllocationTagValue
                  - !Ref "AWS::NoValue"
        UserData:
          Fn::Base64:
            !If
              - UseInstanceUserData
              - !Sub |
                  #!/bin/bash
                  PDISK=$(diskutil list physical external | head -n1 | cut -d" " -f1)
                  APFSCONT=$(diskutil list physical external | grep "Apple_APFS" | tr -s " " | cut -d" " -f8)
                  yes | diskutil repairDisk $PDISK
                  diskutil apfs resizeContainer $APFSCONT 0
                  systemsetup -setcomputersleep never
                  user=ec2-user
                  sudo -u "${!user}" -i <<'EOF'
                  brew install buildkite/buildkite/buildkite-agent &&
                  config="$(brew --prefix)"/etc/buildkite-agent/buildkite-agent.cfg &&
                  sed -i '' "s/xxx/${BuildkiteAgentToken}/g" "${!config}" &&
                  echo "tags=\"queue=${BuildkiteAgentQueue},buildkite-mac-stack=%v\"" >> "${!config}" &&
                  echo "tags-from-ec2-meta-data=true" >> "${!config}" &&
                  brew services start buildkite/buildkite/buildkite-agent &&
                  aws s3 cp s3://${LocalSecretsBucket}/private_ssh_key /Users/ec2-user/.ssh/id_rsa &&
                  chmod 600 /Users/ec2-user/.ssh/id_rsa
                  EOF
                - {
                    LocalSecretsBucket: !If [ CreateSecretsBucket, !Ref ManagedSecretsBucket, !Ref SecretsBucket ],
                  }
              - |
                #!/bin/bash
                echo "UserData was disabled"

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  BuildkiteAgentTokenParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateAgentTokenParameter
    Properties:
      Name: !Sub "/${AWS::StackName}/buildkite/agent-token"
      Type: String
      Value: !Ref BuildkiteAgentToken

  ManagedSecretsLoggingBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSecretsBucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        !If
        - EnforceSecretsBucketEncryption
        -
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
        - !Ref "AWS::NoValue"
      Tags:
        - !If
          - UseCostAllocationTags
          - Key: !Ref CostAllocationTagName
            Value: !Ref CostAllocationTagValue
          - !Ref "AWS::NoValue"

  ManagedSecretsLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateSecretsBucket
    Properties:
      Bucket: !Ref ManagedSecretsLoggingBucket
      PolicyDocument:
        Id: ManagedSecretsLoggingBucketPolicy
        Version: "2012-10-17"
        Statement:
        - Sid: S3ServerAccessLogsPolicy # Grant permissions to the logging service principal using a bucket policy (https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html)
          Effect: Allow
          Principal:
            Service: 'logging.s3.amazonaws.com'
          Action:
          - 's3:PutObject'
          Resource:
          - !GetAtt 'ManagedSecretsLoggingBucket.Arn'
          - !Sub '${ManagedSecretsLoggingBucket.Arn}/*'
          Condition:
            ArnLike:
              'aws:SourceArn': !GetAtt 'ManagedSecretsBucket.Arn'
            StringEquals:
              'aws:SourceAccount': !Ref 'AWS::AccountId'
        - !If
          - EnforceSecretsBucketEncryption
          - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
            - !GetAtt 'ManagedSecretsLoggingBucket.Arn'
            - !Sub '${ManagedSecretsLoggingBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - !Ref "AWS::NoValue"

  ManagedSecretsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSecretsBucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        !If
        - EnforceSecretsBucketEncryption
        -
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
        - !Ref "AWS::NoValue"
      LoggingConfiguration:
        DestinationBucketName: !Ref ManagedSecretsLoggingBucket
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - !If
          - UseCostAllocationTags
          - Key: !Ref CostAllocationTagName
            Value: !Ref CostAllocationTagValue
          - !Ref "AWS::NoValue"

  ManagedSecretsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: EnforceSecretsBucketEncryption
    Properties:
      Bucket: !Ref ManagedSecretsBucket
      PolicyDocument:
        Id: ManagedSecretsBucketPolicy
        Version: "2012-10-17"
        Statement:
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !GetAtt 'ManagedSecretsBucket.Arn'
          - !Sub '${ManagedSecretsBucket.Arn}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false